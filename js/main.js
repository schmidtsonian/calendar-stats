/// <reference path="definitions/jquery/jquery.d.ts"/>
var app;
(function (app) {
    var RippleButton = (function () {
        function RippleButton() {
        }
        RippleButton.prototype.init = function () {
            $(document)
                .on('click touched', '.ripple', function (e) {
                var $ripple = $('<i class="rippling" />'), $button = $(this), btnOffset = $button.offset(), xPos = e.pageX - btnOffset.left, yPos = e.pageY - btnOffset.top, size = 0, animateSize = Math.max($button.width(), $button.height()) * Math.PI;
                $ripple.css({
                    top: yPos,
                    left: xPos,
                    width: size,
                    height: size,
                    backgroundColor: $button.attr('ripple-color')
                })
                    .appendTo($button)
                    .animate({
                    width: animateSize,
                    height: animateSize,
                    opacity: 0
                }, 500, function () {
                    $(this).remove();
                });
            });
        };
        return RippleButton;
    }());
    app.RippleButton = RippleButton;
})(app || (app = {}));
/// <reference path="definitions/jquery/jquery.d.ts" />
/// <reference path="RippleButton.ts" />
var app;
(function (app) {
    ;
    var RippleButton = app.RippleButton;
    var Main = (function () {
        function Main() {
            this.pathCalendar = '../jsons/calendar.json';
            this.classNameDisable = 'disable';
            this.classNameEneable = 'eneable';
            this.classNameYear = 'year__name';
            this.delayActiveStats = 450;
            this.$container = $('#js-conainer');
            this.$year = $('#js-year', this.$container);
            this.$stats = $('.js-stats', this.$container);
            this.$btPrev = $('#js-nav-prev');
            this.$btNext = $('#js-nav-next');
            this.rippleButton = new RippleButton();
        }
        Main.prototype.init = function () {
            this
                .bindings()
                .loadCalendar()
                .then(this.getLastYear.bind(this))
                .then(this.setYears.bind(this))
                .then(this.getStats.bind(this))
                .then(this.setStats.bind(this));
        };
        Main.prototype.bindings = function () {
            var _this = this;
            this.rippleButton.init();
            $(document)
                .keydown(function (e) {
                switch (e.which) {
                    // left
                    case 37:
                        _this.loadYear(_this.currentYear - 1, e);
                        break;
                    case 40:
                        _this.loadYear(_this.currentYear - 1, e);
                        break;
                    // right
                    case 39:
                        _this.loadYear(_this.currentYear + 1, e);
                        break;
                    case 38:
                        _this.loadYear(_this.currentYear + 1, e);
                        break;
                    case 32:
                        _this.loadYear(_this.currentYear + 1, e);
                        break;
                }
                ;
            });
            this.$container
                .swipe({
                swipe: function (e, direction, dist, dur, count, data) {
                    if (direction == 'left')
                        _this.loadYear(_this.currentYear + 1);
                    if (direction == 'right')
                        _this.loadYear(_this.currentYear - 1);
                },
            });
            this.$btPrev.on('click touched', function () { _this.loadYear(_this.currentYear - 1); });
            this.$btNext.on('click touched', function () { _this.loadYear(_this.currentYear + 1); });
            return this;
        };
        // private loadCalendar(): JQueryPromise<{}> {
        //     return $.getJSON( this.pathCalendar );
        // }
        Main.prototype.loadCalendar = function () {
            var defer = $.Deferred();
            defer.resolve({
                "calendar": [
                    { "name": 2010, "months": [54, 25, 55, 30, 50, 24, 52, 12, 54, 70, 80, 34] },
                    { "name": 2011, "months": [35, 60, 34, 22, 64, 65, 40, 80, 90, 44, 10, 92] },
                    { "name": 2012, "months": [80, 95, 44, 54, 17, 32, 74, 45, 75, 90, 72, 74] },
                    { "name": 2013, "months": [10, 25, 44, 54, 17, 32, 74, 45, 75, 90, 72, 74] },
                    { "name": 2014, "months": [54, 25, 55, 30, 50, 24, 52, 12, 54, 70, 80, 34] },
                    { "name": 2015, "months": [35, 60, 34, 22, 64, 65, 40, 80, 90, 44, 64, 62] },
                    { "name": 2016, "months": [50, 70, 44, 54, 95, 12, 74, 45, 75, 90, 72, 74] }
                ]
            });
            return defer.promise();
        };
        Main.prototype.getLastYear = function (data) {
            var defer = $.Deferred();
            this.data = data;
            this.currentYear = this.data.calendar[this.data.calendar.length - 1].name;
            defer.resolve();
            return defer.promise();
        };
        Main.prototype.setYears = function () {
            var defer = $.Deferred();
            this.$year.html('');
            for (var i = this.data.calendar.length - 1; i >= 0; i--) {
                var digits = ('' + this.data.calendar[i].name).split('');
                var year = '';
                for (var ii = 0; ii < digits.length; ii++) {
                    year += '<span>' + digits[ii] + '</span>';
                }
                this.$year.append('<div class="' + this.classNameYear + '">' + year + '</div>');
            }
            defer.resolve();
            return defer.promise();
        };
        Main.prototype.getStats = function (yearName) {
            if (yearName === void 0) { yearName = this.currentYear; }
            var defer = $.Deferred();
            for (var i = this.data.calendar.length - 1; i >= 0; i--) {
                if (this.data.calendar[i].name == yearName) {
                    defer.resolve(this.data.calendar[i]);
                    return defer.promise();
                }
            }
            defer.resolve(null);
            return defer.promise();
        };
        Main.prototype.setStats = function (year) {
            var defer = $.Deferred();
            if (year) {
                this.currentYear = year.name;
                this.currentStats = year.months;
                if (this.isFirstYear()) {
                    this.$btNext.css({ 'display': 'none' });
                }
                else {
                    this.$btNext.css({ 'display': 'block' });
                }
                if (this.isLAstYear()) {
                    this.$btPrev.css({ 'display': 'none' });
                }
                else {
                    this.$btPrev.css({ 'display': 'block' });
                }
                this.displayData();
            }
            defer.resolve(null);
            return defer.promise();
        };
        Main.prototype.displayData = function () {
            var _this = this;
            this.$container.addClass(this.classNameDisable);
            setTimeout(function () {
                _this.$container.removeClass(_this.classNameDisable);
            }, this.delayActiveStats);
            var $yearsName = $('.' + this.classNameYear);
            $yearsName.removeClass(this.classNameEneable);
            for (var i = $yearsName.length - 1; i >= 0; i--) {
                if ($yearsName.eq(i).text() == this.currentYear + '') {
                    $yearsName.eq(i).addClass(this.classNameEneable);
                    break;
                }
            }
            this.$stats.removeClass('highlight__high');
            this.$stats.removeClass('highlight__low');
            var max = Math.max.apply(Math, this.currentStats);
            var min = Math.min.apply(Math, this.currentStats);
            for (var i = this.currentStats.length - 1; i >= 0; i--) {
                var $el = this.$stats.eq(i);
                $el
                    .find('.bar')
                    .css({ 'height': (100 - this.currentStats[i]) + '%' });
                if (max == this.currentStats[i]) {
                    $el.addClass('highlight__high');
                }
                else if (min == this.currentStats[i]) {
                    $el.addClass('highlight__low');
                }
            }
        };
        Main.prototype.isLAstYear = function () {
            return this.data.calendar[0].name == this.currentYear;
        };
        Main.prototype.isFirstYear = function () {
            return this.data.calendar[this.data.calendar.length - 1].name == this.currentYear;
        };
        Main.prototype.loadYear = function (yearName, e) {
            if (e)
                e.preventDefault(); // prevent the default action (scroll / move caret)
            this
                .getStats(yearName)
                .then(this.setStats.bind(this));
        };
        return Main;
    }());
    app.Main = Main;
})(app || (app = {}));
var main;
$('document')
    .ready(function () {
    main = new app.Main();
    main.init();
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
